name: Traefik-Deploy
on:
  workflow_dispatch:
    inputs:
      fo_server:
        description: 'target server to which deploy data is f/o server or not'
        required: true
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SETTING_DIR: /srv/traefik
      LETSENCRYPT_CASERVER: https://acme-v02.api.letsencrypt.org/directory
      CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
      KNOWN_HOSTS: ${{ secrets.KNOWN_HOSTS }}

      SSH_PRIVATE_KEY: ${{ inputs.fo_server && secrets.FAIL_SERVER_SSH_PRIVATE_KEY || secrets.PROD_SERVER_SSH_PRIVATE_KEY }}
      SSH_SERVER: ${{ inputs.fo_server && secrets.FAIL_SERVER_ADDRESS || secrets.PROD_SERVER_ADDRESS }}
      SSH_USER: ${{ inputs.fo_server && secrets.FAIL_SERVER_SSH_USER || secrets.PROD_SERVER_SSH_USER }}

    steps:
      # リポジトリをチェックアウト
      - name: Checkout code
        uses: actions/checkout@v3

      # ホストキーの登録とsshキーの設定
      - name: Register known hosts
        run: |
          mkdir -p ~/.ssh/ \
          && echo "$KNOWN_HOSTS" | tr -d '\r' > ~/.ssh/known_hosts \
          && echo "${{ env.SSH_PRIVATE_KEY }}" | tr -d '\r' > pkey.txt \
          && chmod 600 pkey.txt

      # 環境に応じて構成ファイルを作成
      - name: Generate environment file.
        run: |
          touch .env \
          && echo 'LETSENCRYPT_CASERVER='$LETSENCRYPT_CASERVER >> .env \
          && echo 'CLOUDFLARE_API_KEY='$CLOUDFLARE_API_KEY >> .env

      #サーバーにデプロイ ホストマシン設定ファイル
      - name: Deploy to Server for host settings
        run: |
          scp -i pkey.txt -r \
            traefik/docker-compose.yml \
            traefik/dynamic.yml \
            .env \
            ${{ env.SSH_USER }}@${{ env.SSH_SERVER }}:$SETTING_DIR

      # サーバーにデプロイ dockerコンテナ
      - name: Deploy to Server for docker containers
        run: |
          ssh -i pkey.txt ${{ env.SSH_USER }}@${{ env.SSH_SERVER }} << EOF
            cd $SETTING_DIR 
            docker compose pull
            docker compose down
            docker compose up -d
          EOF
    
